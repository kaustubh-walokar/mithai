/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'kaustubh' at '9/16/16 2:47 PM' with Gradle 2.7
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.7/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'scala'
apply plugin: 'idea'
apply plugin: 'eclipse'

compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

sourceSets.main.scala.srcDir "src/main/java"
sourceSets.main.java.srcDirs = []
sourceSets.test.scala.srcDir "src/test/java"
sourceSets.test.java.srcDirs = []

repositories {

    mavenCentral()
}

task initSourceFolders { // add << before { to prevent executing during configuration phase
    sourceSets*.java.srcDirs*.each { it.mkdirs() }
    sourceSets*.resources.srcDirs*.each { it.mkdirs() }
}

task runSparkServer(type: JavaExec, dependsOn: classes) {
    main = 'edu.sjsu.mithai.reciever.NetworkWordCount'
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
    args = [sparkHost, sparkPort]
}

task runMqttPublisher(type: JavaExec, dependsOn: classes) {
    main = 'edu.sjsu.mithai.mqtt.MQTTPublisher'
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
    args = [mosquitoURL, mosquitoTopic]
}

task runMqttReciever(type: JavaExec, dependsOn: classes) {
    main = 'edu.sjsu.mithai.mqtt.MQTTReciever'
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
    args = [mosquitoURL, mosquitoTopic]
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time

    compile 'org.slf4j:slf4j-api:1.7.12'
    compile 'org.scala-lang:scala-library:2.11.8'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'

    compile 'com.sparkjava:spark-core:2.3'
    // https://mvnrepository.com/artifact/org.apache.spark/spark-streaming_2.11
    compile group: 'org.apache.spark', name: 'spark-streaming_2.11', version: '1.6.0'
    // https://mvnrepository.com/artifact/org.apache.spark/spark-streaming-mqtt_2.10
    compile group: 'org.apache.spark', name: 'spark-streaming-mqtt_2.10', version: '1.6.2'
    // https://mvnrepository.com/artifact/org.eclipse.paho/org.eclipse.paho.client.mqttv3
    compile group: 'org.eclipse.paho', name: 'org.eclipse.paho.client.mqttv3', version: '1.1.0'
    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    compile group: 'com.google.code.gson', name: 'gson', version: '2.7'

    // https://mvnrepository.com/artifact/org.apache.kafka/kafka_2.10
    // https://mvnrepository.com/artifact/org.apache.kafka/kafka_2.10
    compile group: 'org.apache.kafka', name: 'kafka_2.10', version: '0.10.0.1'

    // https://mvnrepository.com/artifact/org.apache.kafka/kafka-clients
    compile group: 'org.apache.kafka', name: 'kafka-clients', version: '0.8.2.1'

}

idea {

    //if you want parts of paths in resulting files (*.iml, etc.) to be replaced by variables (Files)
    pathVariables GRADLE_HOME: file('~/cool-software/gradle')

    module {
        //if for some reason you want to add an extra sourceDirs
//        sourceDirs += file('some-extra-source-folder')

        //and some extra test source dirs
//        testSourceDirs += file('some-extra-test-dir')

        //and hint to mark some of existing source dirs as generated sources
//        generatedSourceDirs += file('some-extra-source-folder')

        //and some extra dirs that should be excluded by IDEA
//        excludeDirs += file('some-extra-exclude-dir')

        //if you don't like the name Gradle has chosen
//        name = 'some-better-name'

        //if you prefer different output folders
//        inheritOutputDirs = false
//        outputDir = file('muchBetterOutputDir')
//        testOutputDir = file('muchBetterTestOutputDir')

        //if you prefer different SDK than the one inherited from IDEA project
//        jdkName = '1.6'

        //if you need to put 'provided' dependencies on the classpath
//        scopes.PROVIDED.plus += [ configurations.provided ]

        //if 'content root' (as IDEA calls it) of the module is different
//        contentRoot = file('my-module-content-root')

        //if you love browsing Javadoc
        downloadJavadoc = true

        //and hate reading sources :)
        downloadSources = true
    }
}