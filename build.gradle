/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'kaustubh' at '9/16/16 2:47 PM' with Gradle 2.7
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.7/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'scala'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: "com.commercehub.gradle.plugin.avro"
apply plugin: 'application'

mainClassName = "edu.sjsu.mithai.main.Mithai"
applicationDefaultJvmArgs = ["-Xms512m"]

compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

sourceSets.main.scala.srcDir "src/main/java"
sourceSets.main.java.srcDirs = []
sourceSets.test.scala.srcDir "src/test/java"
sourceSets.test.java.srcDirs = []

task( real_sensor, type: JavaExec ) {
    main = 'edu.sjsu.mithai.apps.temperature.RealTemperatureSensor'
    classpath = sourceSets.main.runtimeClasspath
}

repositories {
    mavenCentral()
}

task initSourceFolders { // add << before { to prevent executing during configuration phase
    sourceSets*.java.srcDirs*.each { it.mkdirs() }
    sourceSets*.resources.srcDirs*.each { it.mkdirs() }
}

task fatJar(type: Jar, dependsOn: clean) {
    destinationDir = file("./deployable")
    zip64 true
    manifest {
        attributes 'Main-Class': 'edu.sjsu.mithai.main.Mithai'
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
}

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.commercehub.gradle.plugin:gradle-avro-plugin:0.9.0"
    }
}

jar {
    destinationDir = file("./deployable")
    manifest {
        attributes 'Main-Class': 'edu.sjsu.mithai.main.Mithai'
    }
    doFirst {
        zip64 true
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }

        exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    }
    doLast {
        task copy(type: Copy) {
            from 'src/main/resources'
            into './deployable'
        }
        tasks.copy.execute()
        tasks.zip.execute()
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.1'
}

task copyResources(type: Copy) {
    from 'src/main/resources'
    into 'build/classes'
}

task zip(type: Zip) {
    from('deployable/')
    destinationDir file('zip') // directory that you want your archive to be placed in
}

build {
    doLast {
        tasks.copyResources.execute()
    }
}

// In this section you declare the dependencies for your production and test code
dependencies {

    compile fileTree(dir: 'lib', include: ['*.jar'])
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.12'
    compile 'org.scala-lang:scala-library:2.11.8'
    testCompile 'junit:junit:4.12'
    // https://mvnrepository.com/artifact/org.apache.spark/spark-core_2.11
    compile group: 'org.apache.spark', name: 'spark-core_2.11', version: '2.0.0'
    // https://mvnrepository.com/artifact/org.apache.spark/spark-streaming_2.11
    compile group: 'org.apache.spark', name: 'spark-streaming_2.11', version: '1.6.0'
    // https://mvnrepository.com/artifact/org.apache.spark/spark-streaming-mqtt_2.10
    compile group: 'org.apache.spark', name: 'spark-streaming-mqtt_2.10', version: '1.6.2'
    // https://mvnrepository.com/artifact/org.eclipse.paho/org.eclipse.paho.client.mqttv3
    compile group: 'org.eclipse.paho', name: 'org.eclipse.paho.client.mqttv3', version: '1.1.0'
    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    compile group: 'com.google.code.gson', name: 'gson', version: '2.7'
    // https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-common
    compile group: 'org.apache.hadoop', name: 'hadoop-common', version: '2.7.3'
    // https://mvnrepository.com/artifact/org.apache.kafka/kafka_2.10
    compile group: 'org.apache.kafka', name: 'kafka_2.10', version: '0.10.0.1'
    // https://mvnrepository.com/artifact/org.apache.kafka/kafka-clients
    compile group: 'org.apache.kafka', name: 'kafka-clients', version: '0.8.2.1'
    // https://mvnrepository.com/artifact/org.apache.httpcomponents/httpcore
    compile group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.4.5'
    // https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.2'
    // https://mvnrepository.com/artifact/org.apache.avro/avro
    compile group: 'org.apache.avro', name: 'avro', version: '1.8.1'
    // https://mvnrepository.com/artifact/org.apache.avro/avro-compiler
    compile group: 'org.apache.avro', name: 'avro-compiler', version: '1.8.1'

}

idea {

    //if you want parts of paths in resulting files (*.iml, etc.) to be replaced by variables (Files)
    //pathVariables GRADLE_HOME: file('~/cool-software/gradle')

    module {

        downloadJavadoc = true
        downloadSources = true

    }
}
